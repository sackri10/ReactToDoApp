{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layout/Header.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","checked","onChange","markComplete","bind","onClick","handleDelete","btnStyle","Component","color","border","borderRadius","float","cursor","Todos","todos","map","key","headerStyle","textAlign","linkStyle","Header","to","AddTodo","state","e","setState","target","name","value","onSubmit","preventDefault","AddTodoItem","display","placeholder","flex","className","About","App","console","log","filter","newTodo","uuid","axios","post","then","response","data","get","exact","path","render","Fragment","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f0d365b4.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nexport class TodoItem extends Component {\r\n\r\n    \r\n    getStyle= () => {\r\n        return {\r\n        background:'#f4f4f4',\r\n        padding:'10px',\r\n        borderBottom:'1px #ccc dotted',\r\n       textDecoration: this.props.todo.completed ? 'line-through' :'none'\r\n        }\r\n    }\r\n   \r\n    render() {\r\n        const { id, title,completed } = this.props.todo;\r\n        return (\r\n          <div style={this.getStyle()}>\r\n            <p>\r\n                <input type=\"checkbox\" checked= {completed} onChange={this.props.markComplete.bind(this,id)}/> {' '}                \r\n                {title}\r\n                <button onClick={this.props.handleDelete.bind(this,id)} style={btnStyle}>x</button>\r\n                </p>\r\n          </div>\r\n        );\r\n    }\r\n}\r\nTodoItem.propTypes ={\r\n    todo:PropTypes.object.isRequired\r\n}\r\n\r\nconst btnStyle={\r\n    background:'#ff0000',\r\n    color:'#fff',\r\n    border:'none',\r\n    padding:'5px 9px',\r\n    borderRadius:'50%',\r\n    float:'right',\r\n    cursor:'pointer'\r\n}\r\nexport default TodoItem\r\n","import React, { Component } from 'react'\r\nimport { TodoItem } from './TodoItem';\r\n\r\nexport class Todos extends Component {  \r\n \r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.todos.map((todo) => {\r\n          return (\r\n            <TodoItem\r\n              handleDelete ={this.props.handleDelete} markComplete={this.props.markComplete}\r\n              key={todo.id}\r\n              todo={todo}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Todos\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Header() {\r\n    return (\r\n      <header style={headerStyle}>\r\n        <h1>TodoList</h1>\r\n        <Link style={linkStyle} to=\"/\">\r\n          Home\r\n        </Link>\r\n        <Link style={linkStyle}  to=\"/about\">\r\n          About\r\n        </Link>\r\n      </header>\r\n    );\r\n}\r\nconst headerStyle= {\r\n    background:'#333',\r\n    color:'#fff',\r\n    textAlign:'center',\r\n    padding:'10px'\r\n}\r\nconst linkStyle={\r\n    color:'#fff',\r\n    textDecoration:'none'\r\n}\r\nexport default Header\r\n","import React, { Component } from 'react'\r\n\r\nexport class AddTodo extends Component {\r\n    state={\r\n        title:''\r\n    }\r\n    onChange =(e) =>{\r\n        this.setState({[e.target.name]: e.target.value})\r\n    }\r\n    onSubmit =(e) => {\r\n        e.preventDefault();\r\n        this.props.AddTodoItem(this.state.title);\r\n        this.setState({title: ''});\r\n        \r\n    }\r\n    render() {\r\n        return (\r\n          <form onSubmit= {this.onSubmit} style={{display:'flex'}}>\r\n            <input type=\"text\" name=\"title\" placeholder=\"Add Todo...\"  style={{flex:'10',padding:'5px'}} value={this.state.title} onChange={this.onChange}/>\r\n            <input type=\"submit\" value=\"Submit\" className=\"btn\" style={{flex:'1'}}/>\r\n          </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddTodo\r\n","import React from 'react'\r\n\r\nfunction About() {\r\n    return (\r\n        <div>\r\n           <h1>About</h1> \r\n           <p> TodoList V1</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About\r\n","import React, { Component } from 'react'\nimport {BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport { Todos } from './components/Todos';\nimport Header from './components/layout/Header';\nimport { AddTodo } from './components/AddTodo';\nimport {v4 as uuid} from 'uuid';\nimport About from './components/pages/About';\nimport axios from 'axios';\nexport class App extends Component {\n  state = {\n    todos: [ ],\n  };\n  componentDidMount(){\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=15').then((response)=> {\n    this.setState({todos: response.data});\n    });\n\n  }\n  markComplete = (id) => {\n    console.log(id);\n    this.setState({\n      todos: this.state.todos.map((todo) => {\n        if (todo.id === id) todo.completed = !todo.completed;\n        return todo;\n      }),\n    });\n  };\n  handleDelete = (id) => {\n    this.setState({\n      todos: [\n        ...this.state.todos.filter((todo) => {\n          return todo.id !== id ? todo : null;\n        }),\n      ],\n    });\n  };\n\n  AddTodoItem = (title) => {\n    const newTodo = {\n      id: uuid(),\n      title,\n      completed: false,\n    };\n    axios.post('https://jsonplaceholder.typicode.com/todos',newTodo ).then(response => {\n        this.setState({ todos: [...this.state.todos, response.data] });\n    });\n    \n\n    console.log(title);\n  };\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header></Header>\n            <Route exact path=\"/\" render= {props=> (\n              \n              <React.Fragment>              \n                <AddTodo AddTodoItem={this.AddTodoItem} />\n            <Todos\n              handleDelete={this.handleDelete}\n              todos={this.state.todos}\n              markComplete={this.markComplete}\n            ></Todos>\n              </React.Fragment>\n            )}>\n\n            </Route>\n            <Route path=\"/about\" component={About}>\n\n            </Route>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}